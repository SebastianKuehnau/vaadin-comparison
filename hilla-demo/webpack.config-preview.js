/*
 * This file is generated by the Vaadin Studio extension for VS Code.
 * We hope to avoid pollluting the application directory in the future, but we're not there yet.
 */

const merge = require('webpack-merge');
const appDefaults = require('./webpack.config.js');

// For transpilation
const ts = require('typescript');
const bodyParser = require('body-parser');

function codeChanger(templateImports) {
  return (context) => {
    const visit = (node) => {
      if (ts.isImportDeclaration(node)) {
        if (node.moduleSpecifier) {
          processModuleImport(node, templateImports);
        }
        return undefined;
      }
      return ts.visitEachChild(node, (child) => visit(child), context);
    };
    return (node) => ts.visitNode(node, visit);
  };
}

function processModuleImport(node, templateImports) {
  if (node.importClause) {
    processModuleClauseImport(node, templateImports);
  } else {
    // Handles format: "import '@vaadin/vaadin-button';"
    const importModule = node.moduleSpecifier.text;
    templateImports.push({
      importModule: importModule,
      importExpression: importModule,
      isModuleImport: true,
    });
  }
}

function processModuleClauseImport(node, templateImports) {
  if (isNamedImport(node) && !isDefaultImport(node) && !isNamespaceImport(node) && !isNamedImportWithAliases(node)) {
    // Handles format: "import {showNotification} from '@vaadin/flow-frontend/a-notification';"
    const importModule = node.moduleSpecifier.text;
    const importNames = node.importClause.namedBindings.elements.map((element) => element.name.text);
    templateImports.push({
      importModule: importModule,
      importExpression: `{${importNames}} from ${importModule}`,
      importNames: importNames,
    });
  } else if (isDefaultImport(node) && !isNamedImport(node) && !isNamespaceImport(node)) {
    // Handles format: "import SamplePerson from '../../generated/com/example/application/data/entity/SamplePerson';"
    const importModule = node.moduleSpecifier.text;
    const importName = node.importClause.name.text;
    templateImports.push({
      importModule: importModule,
      importExpression: `${importName} from ${importModule}`,
      importName: importName,
    });
  } else if (isNamespaceImport(node) && !isNamedImport(node) && !isDefaultImport(node)) {
    // Handles format: "import * as SamplePersonEndpoint from '../../generated/SamplePersonEndpoint';"
    const importModule = node.moduleSpecifier.text;
    const importAlias = node.importClause.namedBindings.name.text;
    templateImports.push({
      importModule: importModule,
      importExpression: `* as ${importAlias} from ${importModule}`,
      importAlias: importAlias,
    });
  } else {
    throw Error('Unsupported import type.');
  }
}

function isNamedImport(node) {
  return node.importClause.namedBindings && ts.isNamedImports(node.importClause.namedBindings);
}

function isNamedImportWithAliases(node) {
  return (
    isNamedImport(node) &&
    node.importClause.namedBindings.elements.find((element) => element.getText() !== element.name.text) !== undefined
  );
}

function isDefaultImport(node) {
  return node.importClause.name !== undefined;
}

function isNamespaceImport(node) {
  return node.importClause.namedBindings && ts.isNamespaceImport(node.importClause.namedBindings);
}

module.exports = merge(appDefaults, {
  entry: { ...appDefaults.entry, bundle: '../index-preview' },
  devServer: {
    after: (app) => {
      app.use(bodyParser.text());
      app.post('/VAADIN/transpile', function (req, res) {
        const templateImports = [];
        const code = req.body;
        const transpiledCode = ts.transpileModule(code, {
          compilerOptions: {
            module: ts.ModuleKind.ESNext,
            target: ts.ScriptTarget.ES2017,
            importsNotUsedAsValues: ts.ImportsNotUsedAsValues.Remove,
          },
          transformers: { after: [codeChanger(templateImports)] },
        }).outputText;
        res.setHeader('Content-Type', 'application/javascript');
        res.end(
          JSON.stringify({
            transpiledCode: transpiledCode,
            templateImports: templateImports,
          })
        );
      });
    },
  },
});
